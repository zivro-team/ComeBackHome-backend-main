package project.comebackhomebe.global.slack.service;

import com.slack.api.Slack;
import com.slack.api.model.Attachment;
import com.slack.api.model.Field;
import com.slack.api.webhook.Payload;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;
import project.comebackhomebe.global.exception.ErrorCode;
import project.comebackhomebe.global.slack.data.Color;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class SlackService {
    @Value("${slack.webhook-uri}")
    private String webhookUri;

    private final Slack slackClient = Slack.getInstance();
    private final Environment environment;

    /**
     * Ïä¨ÎûôÏóê Î©îÏÑ∏ÏßÄ Ï†ÑÏÜ°
     */
    public void sendMessageToSlack(String title, Map<String, String> data) {
        try {
            slackClient.send(webhookUri, Payload.builder()
                    .text(title)
                    .attachments(List.of(
                            Attachment.builder()
                                    .color(Color.RED.getColor())
                                    .fields(data.keySet()
                                            .stream()
                                            .map(key -> generateSlackField(key, data.get(key)))
                                            .collect(Collectors.toList()))
                                    .build()))
                    .build()
            );
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Slack Field ÏÉùÏÑ±
     **/
    private Field generateSlackField(String title, String value) {
        return Field.builder()
                .title(title)
                .value(value)
                .valueShortEnough(false)
                .build();
    }

    public void sendSlackMessage(Exception exception, ErrorCode errorCode, HttpServletRequest request) {
        Map<String, String> data = new HashMap<>();

        // Í∏∞Î≥∏ ÏóêÎü¨ Ï†ïÎ≥¥
        data.put("üö® ÏóêÎü¨ Î©îÏãúÏßÄ", exception.getMessage());
        data.put("üîß ÏóêÎü¨ ÏΩîÎìú", errorCode.name());
        data.put("üìä HTTP ÏÉÅÌÉú", String.valueOf(errorCode.getHttpStatus().value()));
        data.put("‚è∞ Î∞úÏÉù ÏãúÍ∞Ñ", LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));

        // ÏöîÏ≤≠ Ï†ïÎ≥¥
        if (request != null) {
            data.put("üåê ÏöîÏ≤≠ URL", request.getRequestURL().toString());
            data.put("üìù HTTP Î©îÏÜåÎìú", request.getMethod());
            data.put("üñ•Ô∏è ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ IP", getClientIP(request));
            data.put("üë§ User-Agent", request.getHeader("User-Agent"));
        }

        // Ïä§ÌÉù Ìä∏Î†àÏù¥Ïä§ (Ï§ëÏöîÌïú ÏóêÎü¨Ïùò Í≤ΩÏö∞)
        if (isImportantError(errorCode)) {
            data.put("üìã Ïä§ÌÉù Ìä∏Î†àÏù¥Ïä§", getStackTrace(exception));
        }

        // ÌôòÍ≤Ω Ï†ïÎ≥¥
        data.put("üè∑Ô∏è ÌîÑÎ°úÌååÏùº", Arrays.toString(environment.getActiveProfiles()));

        sendMessageToSlack("üî• " + errorCode.getMessage(), data);
    }

    private boolean isImportantError(ErrorCode errorCode) {
        // CRITICAL, HIGH Î†àÎ≤® ÏóêÎü¨Îßå Ïä§ÌÉù Ìä∏Î†àÏù¥Ïä§ Ìè¨Ìï®
        return errorCode.getHttpStatus().value() >= 400;
    }

    private String getStackTrace(Exception exception) {
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        exception.printStackTrace(pw);
        String stackTrace = sw.toString();

        // ÎÑàÎ¨¥ Í∏∏Î©¥ ÏïûÎ∂ÄÎ∂ÑÎßå (Slack Î©îÏãúÏßÄ Í∏∏Ïù¥ Ï†úÌïú)
        return stackTrace.length() > 1000 ? stackTrace.substring(0, 1000) + "..." : stackTrace;
    }

    private String getClientIP(HttpServletRequest request) {
        String xForwardedFor = request.getHeader("X-Forwarded-For");
        if (xForwardedFor != null && !xForwardedFor.isEmpty()) {
            return xForwardedFor.split(",")[0].trim();
        }
        return request.getRemoteAddr();
    }


}
